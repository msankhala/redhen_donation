<?php

/**
 * @file
 * Module file for donations.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Denotes that the donation is not active.
 */
const REDHEN_DONATION_INACTIVE = 0;

/**
 * Denotes that the donation is active.
 */
const REDHEN_DONATION_ACTIVE = 1;

/**
 * Return a form for an entity's donation settings.
 *
 * @internal object $entity
 *   Donation Entity.
 *
 * @array $form
 *   Form array.
 * @array $form_state
 *   Form state array.
 * @array $settings
 *   Settings array.
 *
 * @string $entity_type
 *   Host entity type.
 *
 * @int null $entity_id
 *   Host entity id.
 *
 * @see hook_redhen_donation_entity_settings()
 *
 * @return array
 *   Form array.
 */
function redhen_donation_entity_settings_form($form, &$form_state, $settings, $entity_type = NULL, $entity_id = NULL, $bundle = NULL, $field = NULL) {
  if ($entity_id) {
    // We'll need this info when we submit the form:
    $form_state['entity'] = array(
      'entity_id' => $entity_id,
      'entity_type' => $entity_type,
    );
  }

  // Check to see if date_popup is installed so we can provide a friendlier UI.
  $date_popup_installed = FALSE;

  if (\Drupal::moduleHandler()->moduleExists('date_popup')) {
    $date_popup_installed = TRUE;
  }
  $form['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#description' => t('Check to enable donations.'),
    '#default_value' => isset($settings['status']) ? $settings['status'] : -1,
  );

  $form['scheduling'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scheduling'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['scheduling']['open'] = array(
    '#type' => 'textfield',
    '#title' => t('Open Date'),
    '#maxlength' => 25,
    '#description' => t('When to automatically open donations. Format: %time. The date format is YYYY-MM-DD and %timezone is the time zone offset from UTC. Leave blank to disable.',
      array(
        '%time' => !empty($settings['open']) ? date_format(date_create($settings['open']), 'Y-m-d H:i:s O') : format_date(time(), 'custom', 'Y-m-d H:i:s O'),
        '%timezone' => !empty($settings['open']) ? date_format(date_create($settings['open']), 'O') : format_date(time(), 'custom', 'O'),
      )
    ),
    '#default_value' => !empty($settings['open']) ? $settings['open'] : '',
    '#weight' => 2,
  );

  $form['scheduling']['close'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Date'),
    '#maxlength' => 25,
    '#description' => t('When to automatically close donations. Format: %time. The date format is YYYY-MM-DD and %timezone is the time zone offset from UTC. Leave blank to disable.',
      array(
        '%time' => !empty($settings['close']) ? date_format(date_create($settings['close']), 'Y-m-d H:i') : format_date(time(), 'custom', 'Y-m-d H:i'),
        '%timezone' => !empty($settings['close']) ? date_format(date_create($settings['close']), 'O') : format_date(time(), 'custom', 'O'),
      )
    ),
    '#default_value' => !empty($settings['close']) ? $settings['close'] : '',
    '#weight' => 4,
  );
  if ($entity_id && !$bundle) {
    $entity = entity_load_single($entity_type, $entity_id);
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    $bundle = $wrapper->getBundle();
  }
  if ($bundle) {
    // $options = redhen_donation_fieldmap_options($entity_type, $bundle);
    $options = [];
    $form['scheduling']['open_source'] = array(
      '#type' => 'select',
      '#title' => 'Open Date',
      '#default_value' => isset($settings['open_source']) ? $settings['open_source'] : NULL,
      '#options' => $options,
      '#weight' => 1,
    );
    $form['scheduling']['close_source'] = array(
      '#type' => 'select',
      '#title' => 'Close Date',
      '#default_value' => isset($settings['close_source']) ? $settings['close_source'] : NULL,
      '#options' => $options,
      '#weight' => 3,
    );
    $form['scheduling']['open']['#title'] = 'Specify Open Date';
    $form['scheduling']['open']['#states'] = array(
      'visible' => array(
        ':input[name="scheduling[open_source]"]' => array('value' => ''),
      ),
    );
    $form['scheduling']['close']['#title'] = 'Specify Close Date';
    $form['scheduling']['close']['#states'] = array(
      'visible' => array(
        ':input[name="scheduling[close_source]"]' => array('value' => ''),
      ),
    );
  }
  if ($date_popup_installed) {
    // $zonename = str_replace('_', ' ', variable_get('date_default_timezone'));
    $zonename = \Drupal::config('system.date.timezone.default');
    $url = Url::fromRoute('system.regional_settings');
    $timezone = Link::fromTextAndUrl(t("site's default time zone"), $url)->toString();

    timezone_identifiers_list();
    $form['scheduling']['open']['#type'] = 'date_popup';
    $form['scheduling']['open']['#date_format'] = 'Y-m-d H:i';
    $form['scheduling']['open']['#description'] = t('When to automatically open donations. (This uses the !timezone, which is !zone.)', array(
      // '!timezone' => l(t("site's default time zone"), 'admin/config/regional/settings'),
      '!timezone' => $timezone,
      '!zone' => $zonename,
    ));
    unset($form['scheduling']['open']['#maxlength']);
    $form['scheduling']['close']['#type'] = 'date_popup';
    $form['scheduling']['close']['#date_format'] = 'Y-m-d H:i';
    $form['scheduling']['close']['#description'] = t('When to automatically close donations. (This uses the !timezone, which is !zone.)', array(
      '!timezone' => $timezone,
      '!zone' => $zonename,
    ));
    unset($form['scheduling']['close']['#maxlength']);
  }

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['settings']['confirmation_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirmation page'),
    '#default_value' => isset($settings['settings']['confirmation_page']) ? $settings['settings']['confirmation_page'] : '',
    '#description' => t('Set the URL of the confirmation page. If not set, the form will redirect to itself.'),
  );

  $form['settings']['confirmation_message'] = array(
    '#type' => 'textfield',
    '#size' => 120,
    '#title' => t('Confirmation message'),
    '#default_value' => isset($settings['settings']['confirmation_message']) ? $settings['settings']['confirmation_message'] : 'Thank you for your donation!',
    '#description' => t('Set the message to appear after a successful donation. Leave blank to display no message.'),
  );
  // Display the list of available placeholders if token module is installed.
  if (\Drupal::moduleHandler()->moduleExists('token')) {
    $form['settings']['confirmation_message']['#description'] .= ' ' . t('Tokens may be used.');
    $form['settings']['token_help'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available Tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      'token_help_details' => array(
        '#theme' => 'token_tree',
        '#token_types' => array('redhen_donation', 'redhen_donation_type'),
      ),
    );
  }
  if (isset($field)) {
    $donation_type = redhen_donation_type_load($wrapper->{$field}->value());
    $products = redhen_donation_load_configured_skus($donation_type->settings['commerce_settings']['product_options']);
    $product_options = array('' => '-- None --');
    foreach ($products as $product) {
      $product_options[$product->sku] = $product->title;
    }
    $first_product = reset($products);
    $form['settings']['default_product'] = array(
      '#type' => 'select',
      '#title' => t('Default donation product'),
      '#default_value' => isset($settings['settings']['default_product']) ? $settings['settings']['default_product'] : $first_product->sku,
      '#options' => $product_options,
      '#description' => t('Select the product type to be selected by default.'),
    );
  }
  $form['settings']['donation_entry'] = array(
    '#type' => 'select',
    '#title' => t('Donation entry'),
    '#default_value' => isset($settings['settings']['donation_entry']) ? $settings['settings']['donation_entry'] : '',
    '#options' => array(
      'select' => t('Select list'),
      'select_other' => t("Select list (with 'other' option)"),
      'radios' => t("Radio buttons"),
      'radio_other' => t("Radio buttons (with 'other' option)"),
      'custom' => t('Text field (custom amount)'),
    ),
    '#description' => t('Select the type of options widget to use for donation amount.'),
  );

  $form['settings']['donation_amounts_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount selection label'),
    '#default_value' => isset($settings['settings']['donation_amounts_label']) ? $settings['settings']['donation_amounts_label'] : 'Donation Amounts (@cur)',
    '#states' => array(
      'invisible' => array(
        ':input[name="settings[donation_entry]"]' => array(
          'value' => 'custom',
        ),
      ),
    ),
    '#description' => t('Label for the list of allowed donation amounts. Include "@cur" to produce a currency symbol.'),
  );

  $single_donation_options = isset($settings['settings']['donation_amounts']) ? $settings['settings']['donation_amounts'] : NULL;
  $form['settings']['donation_amounts'] = redhen_donation_options_form_field('One-time Donation Amounts', $single_donation_options, $form_state);

  $recurring_donation_options = isset($settings['settings']['recurring_donation_amounts']) ? $settings['settings']['recurring_donation_amounts'] : NULL;
  $form['settings']['recurring_donation_amounts'] = redhen_donation_options_form_field('Recurring Donation Amounts', $recurring_donation_options, $form_state);

  $form['settings']['other_label'] = array(
    '#type' => 'textfield',
    '#title' => t('"Other" option label'),
    '#default_value' => isset($settings['settings']['other_label']) ? $settings['settings']['other_label'] : 'Other',
    '#description' => t('Enter label for the "Other Amount" option.'),
    '#states' => array(
      'invisible' => array(
        ':input[name="settings[donation_entry]"]' => array(
          array('value' => 'select'),
          array('value' => 'radios'),
          array('value' => 'custom'),
        ),
      ),
    ),
  );

  $form['settings']['minimum_donation'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum donation'),
    '#default_value' => isset($settings['settings']['minimum_donation']) ? $settings['settings']['minimum_donation'] : '',
    '#description' => t('Enter the minimum allowed donation as an integer. Leave blank for no minimum.'),
    '#states' => array(
      'invisible' => array(
        ':input[name="settings[donation_entry]"]' => array(
          array('value' => 'select'),
          array('value' => 'radios'),
        ),
      ),
    ),
  );

  $form['settings']['maximum_donation'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum donation'),
    '#default_value' => isset($settings['settings']['maximum_donation']) ? $settings['settings']['maximum_donation'] : '',
    '#description' => t('Enter the maximum allowed donation as an integer. Leave blank for no maximum.'),
    '#states' => array(
      'invisible' => array(
        ':input[name="settings[donation_entry]"]' => array(
          array('value' => 'select'),
          array('value' => 'radios'),
        ),
      ),
    ),
  );

  $form['settings']['submit_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit button'),
    '#default_value' => isset($settings['settings']['submit_label']) ? $settings['settings']['submit_label'] : 'Donate',
    '#description' => t('The text on the form submission button.'),
  );

  // Allow other modules to add their own custom settings:
  $form['settings'] += \Drupal::moduleHandler()->invokeAll('redhen_donation_entity_settings', $settings = []);

  // Only show save if we're not on the field instance defaults.
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
    '#access' => !empty($entity_id),
  );

  return $form;
}

/**
 * Returns the render array of donation optoin field.
 *
 * @internal array $form
 *   Donation options field.
 *
 * @array $label
 *   Label of donation option field.
 * @array $options
 *   Donation options array..
 * @array $form_state
 *   Form state.
 *
 *
 * @return array
 *   Form array.
 */
 function redhen_donation_options_form_field($label, $options, &$form_state) {
  if (is_array($options)) {
    if (isset($options['options_text'])) {
      $donation_amounts = $options['options_text'];
    }
    else {
      $donation_amounts = redhen_allowed_amounts_string($options);
    }
  }
  else {
    $donation_amounts = $options;
  }
  $field = array(
    '#type' => 'textarea',
    '#title' => t($label),
    '#default_value' => $donation_amounts,
    '#states' => array(
      'invisible' => array(
        ':input[name="settings[donation_entry]"]' => array(
          'value' => 'custom',
        ),
      ),
    ),
    '#description' => t('List of allowed donation amounts. Enter one value per line, in the format amount|label. The amount should be entered as an integer value.'),
  );

  // Use options_element style form if possible.
  if (\Drupal::moduleHandler()->moduleExists('options_element')) {
    // Everything inside this if clause was informed by
    // options_element_form_field_ui_field_settings_form_alter() and
    // _options_element_add_allowed_values_element().
    // Get option values or use default set.
    if (isset($form_state['input']['settings']['donation_amounts']['options_field'])) {
      $options = form_options_from_text($form_state['input']['settings']['donation_amounts']['options_field'], 'mixed');
    }
    else {
      $options = form_options_from_text($field['#default_value'], 'mixed');
    }

    $element_overwrite = array(
      '#type' => 'options',
      '#options' => $options,
      '#multiple' => FALSE,
      // Uncomment to expose the toggle allowing users to make "key" optional.
      // '#key_type_toggle' => t('Custom keys'),
      '#key_type_toggled' => TRUE,
      '#default_value_allowed' => TRUE,
      '#default_value' => isset($settings['settings']['donation_amounts_default']) ? $settings['settings']['donation_amounts_default'] : '',
      '#title' => $field['#title'],
      '#description' => t('List of allowed donation amounts. The key should be entered as an integer and the value is what will be displayed on the page.'),
      '#states' => $field['#states'],
    );

    $element = drupal_array_merge_deep($field, $element_overwrite);
    $field = $element;
  }
  return $field;
}
