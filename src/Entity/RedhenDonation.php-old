<?php

namespace Drupal\redhen_donation\Entity;

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityChangedTrait;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\redhen_donation\RedhenDonationInterface;

/**
 * Defines the Redhen Donation entity.
 *
 * @ingroup redhen_donation
 *
 * @ContentEntityType(
 *   id = "redhen_donation",
 *   label = @Translation("RedhenDonation"),
 *   label_singular = @Translation("RedhenDonation"),
 *   label_plural = @Translation("RedhenDonations"),
 *   label_count = @PluralTranslation(
 *     singular = "@count RedhenDonation",
 *     plural = "@count RedhenDonation",
 *   ),
 *   bundle_label = @Translation("RedhenDonation type"),
 *   handlers = {
 *     "view_builder" = "Drupal\Core\Entity\EntityViewBuilder",
 *     "list_builder" = "Drupal\redhen_donation\RedhenDonationListBuilder",
 *     "views_data" = "Drupal\views\EntityViewsData",
 *
 *     "form" = {
 *       "default" = "Drupal\redhen_donation\Form\RedhenDonationForm",
 *       "add" = "Drupal\redhen_donation\Form\RedhenDonationForm",
 *       "edit" = "Drupal\redhen_donation\Form\RedhenDonationForm",
 *       "delete" = "Drupal\redhen_donation\Form\RedhenDonationDeleteForm",
 *     },
 *     "access" = "Drupal\redhen_donation\DonationAccessControlHandler",
 *     "route_provider" = {
 *       "html" = "Drupal\redhen_donation\DonationHtmlRouteProvider",
 *     },
 *   },
 *   base_table = "redhen_donation",
 *   revision_table = "redhen_donation_revision",
 *   admin_permission = "administer redhen donation entities",
 *   entity_keys = {
 *     "id" = "id",
 *     "revision" = "revision_id",
 *     "bundle" = "type",
 *     "uuid" = "uuid",
 *     "langcode" = "langcode",
 *     "status" = "status",
 *   },
 *   links = {
 *     "canonical" = "/redhen/donation/{redhen_donation}",
 *     "add-form" = "/redhen/donation/add/{redhen_donation_type}",
 *     "edit-form" = "/redhen/donation/{redhen_donation}/edit",
 *     "delete-form" = "/redhen/donation/{redhen_donation}/delete",
 *     "collection" = "/redhen/donation",
 *   },
 *   bundle_entity_type = "redhen_donation_type",
 *   field_ui_base_route = "entity.redhen_donation_type.edit_form"
 * )
 */
class RedhenDonation extends ContentEntityBase implements RedhenDonationInterface {
  use EntityChangedTrait;

  /**
   * {@inheritdoc}
   */
  public function label() {
    return $this->getName();
  }

  /**
   * {@inheritdoc}
   */
  public function getName() {
    $name = $this->get('name')->value;
    // Allow other modules to alter the name of the donation.
    \Drupal::moduleHandler()->alter('redhen_donation_name', $name, $this);
    return $name;
  }

  /**
   * {@inheritdoc}
   */
  public function setName($name) {
    $this->set('name', $name);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function getType() {
    return $this->bundle();
  }

  /**
   * {@inheritdoc}
   */
  public function getCreatedTime() {
    return $this->get('created')->value;
  }

  /**
   * {@inheritdoc}
   */
  public function setCreatedTime($timestamp) {
    $this->set('created', $timestamp);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public function isActive() {
    return (bool) $this->getEntityKey('status');
  }

  /**
   * {@inheritdoc}
   */
  public function setActive($active) {
    $this->set('status', $active ? REDHEN_DONATION_ACTIVE : REDHEN_DONATION_INACTIVE);
    return $this;
  }

  /**
   * {@inheritdoc}
   */
  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
    // $config = \Drupal::config('redhen_donation.settings');
    $fields = parent::baseFieldDefinitions($entity_type);

    // $required_names = $config->get('required_properties');
    // $fields['first_name'] = BaseFieldDefinition::create('string')
    //   ->setLabel(t('First Name'))
    //   ->setSettings([
    //     'max_length' => 50,
    //     'text_processing' => 0,
    //   ])
    //   ->setDefaultValue('')
    //   ->setDisplayOptions('form', [
    //     'type' => 'string_textfield',
    //     'weight' => -10,
    //   ])
    //   ->setDisplayConfigurable('form', TRUE)
    //   ->setDisplayConfigurable('view', TRUE)
    //   ->setRequired($required_names['first_name'])
    //   ->setRevisionable(TRUE);
    // $fields['middle_name'] = BaseFieldDefinition::create('string')
    //   ->setLabel(t('Middle Name'))
    //   ->setSettings([
    //     'max_length' => 50,
    //     'text_processing' => 0,
    //   ])
    //   ->setDefaultValue('')
    //   ->setDisplayOptions('form', [
    //     'type' => 'string_textfield',
    //     'weight' => -9,
    //   ])
    //   ->setDisplayConfigurable('form', TRUE)
    //   ->setDisplayConfigurable('view', TRUE)
    //   ->setRequired($required_names['middle_name'])
    //   ->setRevisionable(TRUE);
    // $fields['last_name'] = BaseFieldDefinition::create('string')
    //   ->setLabel(t('Last Name'))
    //   ->setSettings([
    //     'max_length' => 50,
    //     'text_processing' => 0,
    //   ])
    //   ->setDefaultValue('')
    //   ->setDisplayOptions('form', [
    //     'type' => 'string_textfield',
    //     'weight' => -8,
    //   ])
    //   ->setDisplayConfigurable('form', TRUE)
    //   ->setDisplayConfigurable('view', TRUE)
    //   ->setRequired($required_names['last_name'])
    //   ->setRevisionable(TRUE);
    // $fields['email'] = BaseFieldDefinition::create('email')
    //   ->setLabel(t('Email'))
    //   ->setDefaultValue('')
    //   ->addConstraint('ContactEmailUnique')
    //   ->setDisplayOptions('view', [
    //     'label' => 'inline',
    //     'type' => 'email_mailto',
    //     'weight' => -4,
    //   ])
    //   ->setDisplayOptions('form', [
    //     'type' => 'string_textfield',
    //     'weight' => -4,
    //   ])
    //   ->setDisplayConfigurable('form', TRUE)
    //   ->setDisplayConfigurable('view', TRUE)
    //   ->setRevisionable(TRUE)
    //   ->setRequired($config->get('valid_email'));
    // $fields['uid'] = BaseFieldDefinition::create('entity_reference')
    //   ->setLabel(t('Linked user'))
    //   ->setDescription(t('The Drupal user this contact is linked to.'))
    //   ->setRevisionable(TRUE)
    //   ->setSetting('target_type', 'user')
    //   ->setTranslatable(FALSE)
    //   ->setRequired(FALSE)
    //   ->setDisplayOptions('view', [
    //     'label' => 'inline',
    //     'type' => 'entity_reference_label',
    //     'settings' => [
    //       'link' => TRUE,
    //     ],
    //     'weight' => 0,
    //   ])
    //   ->setDisplayOptions('form', [
    //     'type' => 'entity_reference_autocomplete',
    //     'weight' => 5,
    //     'settings' => [
    //       'match_operator' => 'CONTAINS',
    //       'size' => '60',
    //       'autocomplete_type' => 'tags',
    //       'placeholder' => '',
    //     ],
    //   ])
    //   ->setDisplayConfigurable('form', TRUE)
    //   ->setDisplayConfigurable('view', TRUE);
    // $fields['status'] = BaseFieldDefinition::create('boolean')
    //   ->setLabel(t('Active'))
    //   ->setDescription(t('A boolean indicating whether the Contact is active.'))
    //   ->setDefaultValue(TRUE)
    //   ->setDisplayOptions('form', [
    //     'type' => 'boolean_checkbox',
    //     'settings' => [
    //       'display_label' => TRUE,
    //     ],
    //     'weight' => 16,
    //   ])
    //   ->setDisplayConfigurable('form', TRUE)
    //   ->setRevisionable(TRUE);
    // $fields['created'] = BaseFieldDefinition::create('created')
    //   ->setLabel(t('Created'))
    //   ->setDescription(t('The time that the contact was created.'))
    //   ->setRevisionable(TRUE);
    // $fields['changed'] = BaseFieldDefinition::create('changed')
    //   ->setLabel(t('Changed'))
    //   ->setDescription(t('The time that the contact was last edited.'))
    //   ->setRevisionable(TRUE);
    return $fields;
  }

}
